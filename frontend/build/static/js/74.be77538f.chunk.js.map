{"version":3,"file":"static/js/74.be77538f.chunk.js","mappings":"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","sources":["components/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './AdminDashboard.css';\n\nfunction AdminDashboard() {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  const fetchContacts = useCallback(async () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/admin/contacts`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch contacts');\n      }\n      const data = await response.json();\n      setContacts(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const verifyAuth = useCallback(async () => {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      navigate('/login');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/verify`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Authentication failed');\n      }\n\n      fetchContacts();\n    } catch (err) {\n      localStorage.removeItem('authToken');\n      navigate('/login');\n    }\n  }, [navigate, fetchContacts]);\n\n  useEffect(() => {\n    verifyAuth();\n  }, [verifyAuth]);\n\n  const updateContactStatus = async (id, status) => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/admin/contacts/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ status }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update contact status');\n      }\n      \n      fetchContacts();\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const deleteContact = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this contact?')) {\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/admin/contacts/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete contact');\n      }\n      \n      fetchContacts();\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"admin-loading\">Loading contacts...</div>;\n  }\n\n  if (error) {\n    return <div className=\"admin-error\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"admin-dashboard\">\n      <h1>Contact Form Submissions</h1>\n      \n      <div className=\"contacts-list\">\n        {contacts.map((contact) => (\n          <div key={contact._id} className={`contact-card status-${contact.status}`}>\n            <div className=\"contact-header\">\n              <h3>{contact.subject}</h3>\n              <span className=\"contact-date\">\n                {new Date(contact.createdAt).toLocaleDateString()}\n              </span>\n            </div>\n            \n            <div className=\"contact-info\">\n              <p><strong>From:</strong> {contact.name} ({contact.email})</p>\n              <p className=\"contact-message\">{contact.message}</p>\n            </div>\n            \n            <div className=\"contact-actions\">\n              <select\n                value={contact.status}\n                onChange={(e) => updateContactStatus(contact._id, e.target.value)}\n                className={`status-select status-${contact.status}`}\n              >\n                <option value=\"unread\">Unread</option>\n                <option value=\"read\">Read</option>\n                <option value=\"responded\">Responded</option>\n              </select>\n              \n              <button\n                onClick={() => deleteContact(contact._id)}\n                className=\"delete-button\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        ))}\n        \n        {contacts.length === 0 && (\n          <div className=\"no-contacts\">\n            No contact form submissions yet.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AdminDashboard;"],"names":["contacts","setContacts","useState","loading","setLoading","error","setError","navigate","useNavigate","fetchContacts","useCallback","async","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","err","message","verifyAuth","removeItem","useEffect","_jsx","className","children","_jsxs","map","contact","status","subject","Date","createdAt","toLocaleDateString","name","email","value","onChange","e","id","method","body","JSON","stringify","updateContactStatus","_id","target","onClick","window","confirm","deleteContact","length"],"sourceRoot":""}